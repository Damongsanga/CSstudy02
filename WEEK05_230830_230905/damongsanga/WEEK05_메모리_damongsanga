## 3.2 메모리

CPU는 그저 '메모리'에 올라와있는 프로그램의 명령어를 실행할 뿐임!

### 3.2.1 메모리 계층

- 저장장치 계층 구조
  - Resister
  - Cache (L1, L2, L3)
  - (Main) Memoty (RAM : Random Access Memory)
  - 2nd Memory : Magnetic Disk > Oprical Disk > Magentic Tape

* 계층 위로 올라갈 수록 가격 상승, 용량 하락, 속도 증가

#### 캐시

: 데이터를 미리 복사해놓는 임시 저장소

- 목적 : 데이터 접근 속도 차이에 따른 병목현상을 줄이기 위함

- 캐싱 계층

  - 속도 차이를 해결하기 위해 계층과 계층 사이 있는 메모리 계층
  - 예시 : 캐시 메모리와 보조기억 장치 사이 주기억장치를 캐싱 계층이라 할 수 있음

- 지역성 원리
  캐시 데이터 설정에 대한 근거 : 어떤 데이터를 자주 사용하는가?
  - 시간 지역성 : 최근 사용한 데이터에 다시 접근하려는 특징
    - 예시 : for문의 변수 i를 다시 접근
  - 공간 지역성 : 최근 접근한 데이터를 이루고 있는 공간에 가까운 공간에 접근하려는 특성
    - 예시 : 배열 arr의 각 요소 접근

#### 캐시히트 & 캐시미스

- 캐시 히트 : 캐시에서 원하는 데이터를 찾은 것
  - CPU 내부 버스 기반으로 작동하여 빠름
- 캐시 미스 : 캐시에서 원하는 데이터가 없어 주 메모리에서 데이터를 찾아오는 것

  - 시스템 버스 기반으로 작동하여 느림

- **캐시 매핑**

  - 캐시가 히트되기 위해 매핑
  - Block : 지역성 원리에 의해 데이터를 한번 퍼낼 때의 최소 단위
  - CPU의 레지스터와 주 메모리 간 데이터 주고 받을 때를 예시로 설명
    1. **직접 매핑**
       - 순서대로 캐시와 메모리 매핑
       - 속도가 빠르지만 충돌이 잦음
       - 예시 : 메모리가 1~100까지 있고 캐시가 1~10까지 있다면 1~10까지의 메모리는 캐시의 1에 위치하고 11~20까지의 메모리는 캐시의 2에 위치
       - 단점 예시 : 30~40에 해당하는 값을 자꾸 불러다 사용해야 하는데 이를 저장할 캐시 공간은 3 하나 뿐이므로 매번 캐시 교체가 일어나게 된다
    2. **연관 매핑**
       - 순서 일치시키지 않고 관련있는 캐시와 메모리 매핑
       - 충돌이 적으나 모든 블록 탐색 필요하여 속도가 느림
    3. **집합 연관 매핑**
       - 직접 매핑과 연관 매핑 합침
       - 순서는 일치시키나 집합을 둬서 보다 효울적으로 검색 가능
       - 예시 : 메모리가 1~100까지 있고 캐시가 1~10까지 있다면 캐시 1~5에는 1~50의 데이터를 무작위로 저장
  - [참조](https://ssoonidev.tistory.com/35)

- **웹 브라우저의 캐시**

  - 서버 요청할 때 클라이언트 아이덴티티 확인 or 중복 요청 방지를 위해 쓰임
  - **쿠키 : 만료기한이 있는 키 - 값 저장소**

    - 최대 4KB
    - 웹브라우저에 저장되며 웹 브라우저는 향후 사용자가 웹 서버에 요청할 때 관련 쿠키를 첨부
    - 기능
      - 사용자 세션 : 웹 사이트 활동을 특정 사용자와 연결
      - 개인화 : 웹 사이트가 사용자 경험을 맞춤화하는 데 사용
      - 인증 쿠키(아래 참조)와 같이 보안을 위해 사용
    - 그러나 일부 쿠키에는 사용자의 웹 사이트 이용 내역이 기록되어 개인 정보 문제 발생 가능
    - 보통 서버쪽에서 만료기한을 정함
    - 쿠키 설정시 document.cookie로 쿠키를 볼 수 없게 httponly 옵션을 거는 것이 중요

  - **로컬 스토리지 : 만료기한이 없는 키-값 저장소**

    - 최대 10MB
    - **도메인 단위로 저장, 생성 되며 웹 브라우저를 닫아도 유지**
    - HTML5 지원해야 사용 가능
    - 서버에서 수정 불가능 (클라이언트만 수정 가능)

  - **세션 스토리지 : 만료기한이 없는 키-값 저장소**
    - 최대 5MB
    - **탭 단위로 생성, 삭제 되며 브라우저 탭을 닫으면 제거됨**
    - HTML5 지원해야 사용 가능
    - 서버에서 수정 불가능 (클라이언트만 수정 가능)

[참조] (https://www.zerocho.com/category/HTML&DOM/post/5918515b1ed39f00182d3048)

- 데이터베이스에서의 캐싱 계층
  - 메인 데이터베이스 위 redis 데이터베이스 계층을 캐싱 계층으로 두어 성능 향상하기도

### 3.2.2 메모리 관리

: OS의 대표적인 업무

#### 가상 메모리

:

##### 스와핑

##### 페이지폴트

#### 스레싱

##### 작업 세트

##### PFF

#### 메모리 할당

##### 1. 연속 할당 방식

##### 1.1 고정 분할 방식

##### 1.2 가변 분할 방식

#### 2. 불연속 할당

##### 2.1 페이징

##### 2.2 세그멘테이션

##### 2.3 페이지드 세그멘테이션

#### 페이지 교체 알고리즘

##### 1. 오프라인 알고리즘

##### 2. FIFO

##### 3. LRU

##### 4. NUR

##### 5. LFU
